import java.util.*;

class graph
{
	int [][] matrix = new int[10][10];   // adjacency matrix
	ArrayList<Integer> a = new ArrayList<Integer>();
	LinkedList<Integer> b= new LinkedList<Integer>();
	boolean [] reached = new boolean [10];
	public graph()
	{
		for(int i=0;i<10;i++)
			reached[i]=false;
		for (int i=0; i < 10; i++)
	      {
	         for (int j=0; j < 10; j++)
	         {
	           
	               matrix[i][j] = Integer.MAX_VALUE;
	         }
	      }

	}
	public void addedge(int v1,int v2, int weight)
	{
		this.matrix[v1][v2] = weight;
		this.matrix[v2][v1]=this.matrix[v1][v2];
	}
	public void displaymatrix()
	{//display matrix function
		System.out.println("  "+0+" "+1+" "+2+" "+3+" "+4+" "+5+" "+6+" "+7+" "+8+" "+9);
		for(int i=0; i<10;i++)
		{
			System.out.print(i+" ");
			for(int j=0; j<10;j++)
			{
				if(matrix[i][j]==Integer.MAX_VALUE)
					System.out.print("*"+" ");
				else
				System.out.print(matrix[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
	public void heapify(int index)
	{/*heapify function, just do one step comparison. then I can use this code both in build 
		heap and heap sort*/ 
		int i=index;
		int c=a.size();
		int temp;
		if(2*i+1>c)
		{//if this node has only one child
			if((int)a.get(i)>(int)a.get(2*i))
			{//check and swap
				temp=(int) a.get(i); 
				a.set(i,a.get(2*i));
				a.set(2*i,temp);
				
			}
		}
		else{
			//if this node has two children find the smaller one 
			int k;
			if((int	)a.get(2*i)<(int)a.get(2*i+1))
			{
				k=2*i;
				temp=a.get(2*i);
			}
			else
			{
				k=2*i+1;
				temp=a.get(2*i+1);
			}
			if(a.get(i)>temp)
			{//check and swap
				a.set(k,a.get(i));
				a.set(i,temp);
			}
		}	
	}
	public int findmin( )
	{
		int i, j;
		int y=0;
		int x=0;
		for(i=0;i<10;i++)
		{
			for(j=0;j<10;j++)
			{
				if(reached[i]&&!reached[j]&&matrix[i][j]<matrix[x][y])
				{
					x=i;
					y=j;
				}
			}
		}
		return y;
	}
	public void prim(int index)
	{

		b.add(index);
		reached[index]=true;
	    int mark;
		for(int j=1;j<10;j++)
		{
			mark=findmin();
			reached[mark]=true;
			b.add(mark);
		}
		
	}
}
public class Prim {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		graph k =new graph();
		k.addedge(0, 1,1);
		k.addedge(0, 4, 2);
		k.addedge(0,9,6);
		k.addedge(1,4,4);
		k.addedge(1,3,5);
		k.addedge(3,6,7);
		k.addedge(4,9,3);
		k.addedge(4,7,5);
		k.addedge(4,5,3);
		k.addedge(5,1,9);
		k.addedge(5,3,4);
		k.addedge(5,6,5);
		k.addedge(5,8,7);
		k.addedge(5,7,6);
		k.addedge(7,9,8);
		k.addedge(8,7,9);
		k.addedge(6,8,6);
		k.addedge(3,2,8);
		k.addedge(6, 2, 9);
		k.displaymatrix();
		k.prim(8);
		System.out.print(k.b);
	}

}
