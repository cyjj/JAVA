import java.util.*;
+
+
+class Queue {        //use linked list to establish an queue
+	LinkedList list= new LinkedList();
+	public void enqueue(int index)   //put in the queue
+	{
+		list.addFirst(index);
+	}
+	public int dequeue()         //first in first out
+	{
+		return (int) list.removeLast();
+	}
+	public boolean empty()         //check whether the queue is empty
+	{
+		return list.isEmpty();
+	}
+}
+
+class graph
+{
+	int [][] matrix = new int[8][8];   // adjacency matrix
+	ArrayList<ArrayList<Integer>> g= new ArrayList<ArrayList<Integer>>(); //create a list to store node in every node there is an array presenting the edges
+	boolean [] visited = new boolean[8];//visited flags
+	public  graph()
+	{
+		
+		ArrayList<Integer> a1 = new ArrayList<Integer>();
+		ArrayList<Integer> a2 = new ArrayList<Integer>();
+		ArrayList<Integer> a3 = new ArrayList<Integer>();
+		ArrayList<Integer> a4 = new ArrayList<Integer>();
+		ArrayList<Integer> a5 = new ArrayList<Integer>();
+		ArrayList<Integer> a6 = new ArrayList<Integer>();
+		ArrayList<Integer> a7 = new ArrayList<Integer>();
+		ArrayList<Integer> a8 = new ArrayList<Integer>();
+		g.add(a1);
+		g.add(a2);
+		g.add(a3);
+		g.add(a4);
+		g.add(a5);
+		g.add(a6);
+		g.add(a7);
+		g.add(a8);
+		g.get(0).add(new Integer(0));
+		a2.add(new Integer(1));
+		a3.add(new Integer(2));
+		a4.add(new Integer(3));
+		a5.add(new Integer(4));
+		a6.add(new Integer(5));
+		a7.add(new Integer(6));
+		a8.add(new Integer(7));
+
+	}
+	public void addedge(int i, int j)
+	{
+		Integer n = new Integer(j);  //add an edge while add a record in matrix
+		g.get(i).add(n);
+		this.matrix[i][j]=1;
+	}
+	public void displaymatrix()
+	{//display matrix function
+		System.out.println("  "+0+" "+1+" "+2+" "+3+" "+4+" "+5+" "+6+" "+7);
+		for(int i=0; i<8;i++)
+		{
+			System.out.print(i+" ");
+			for(int j=0; j<8;j++)
+			{
+				System.out.print(matrix[i][j]+" ");
+			}
+			System.out.println();
+		}
+		System.out.println();
+	}
+	public void DFS(int source)
+	{
+		visited[source]=true;
+		for(int i =1;i<g.get(source).size();i++)
+		{
+			if(visited[g.get(source).get(i)]==false)
+			{// if the linked node with the current node is not visited, mark the flag and go to that node 
+				visited[g.get(source).get(i)]=true;
+				DFS(g.get(source).get(i));
+			}
+		}
+		System.out.print(source+" ");	
+	}
+	public void BFS()
+	{
+		System.out.println();
+		Queue q= new Queue(); //use queue data structure to show the breadth first traversal
+		q.enqueue(0);
+		visited[0]=true;
+		while(!q.empty())
+		{//every time we remove a node from the queue, check the linked node if there is anyone unvisited, enqueue it. 
+			int index = q.dequeue();
+			System.out.print(index+" ");
+			for(int i=1;i<g.get(index).size();i++)
+			{
+				if(visited[g.get(index).get(i)]==false)
+				{
+					visited[g.get(index).get(i)]=true;
+					q.enqueue(g.get(index).get(i));
+				}
+			}
+		}
+	}
+	
+	public void clear()
+	{
+		for(int i =0;i<8;i++)
+		{
+			visited[i]=false;
+		}
+	}
+	
+}
+public class G {
+
+	public static void main(String[] args)
+	{
+		// TODO Auto-generated method stub
+		graph k =new graph();
+		k.addedge(0,5);
+		k.addedge(0, 6);
+		k.addedge(0, 7);
+		k.addedge(6, 0);
+		k.addedge(6, 2);
+		k.addedge(6, 7);
+		k.addedge(6, 3);
+		k.addedge(2, 6);	
+		k.addedge(2, 7);
+		k.addedge(2, 3);
+		k.addedge(3, 2);	
+		k.addedge(3, 6);
+		k.addedge(3, 7);
+		k.addedge(3, 4);
+		k.addedge(4, 3);
+		k.addedge(4, 7);
+		k.addedge(4, 5);
+		k.addedge(4, 1);
+		k.addedge(1, 4);
+		k.addedge(1, 7);
+		k.addedge(1, 5);
+		k.addedge(5, 1);
+		k.addedge(5, 4);
+		k.addedge(5, 7);
+		k.addedge(5, 0);
+		k.addedge(7, 0);
+		k.addedge(7, 6);
+		k.addedge(7, 2);
+		k.addedge(7, 3);
+		k.addedge(7, 4);
+		k.addedge(7, 1);
+		k.addedge(7, 5);
+		System.out.println("display in matrix way:");
+		k.displaymatrix();
+		System.out.println("DFS:");
+		k.DFS(0);//we can also choose other start point
+		k.clear();
+		System.out.println();
+		System.out.print("BFS:");
+		k.BFS();
+	}
+
+}
